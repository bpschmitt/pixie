// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_idprovider is a generated GoMock package.
package mock_idprovider

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	admin "github.com/ory/hydra-client-go/client/admin"
	admin0 "github.com/ory/kratos-client-go/client/admin"
	public "github.com/ory/kratos-client-go/client/public"
)

// MockhydraAdminClientService is a mock of hydraAdminClientService interface.
type MockhydraAdminClientService struct {
	ctrl     *gomock.Controller
	recorder *MockhydraAdminClientServiceMockRecorder
}

// MockhydraAdminClientServiceMockRecorder is the mock recorder for MockhydraAdminClientService.
type MockhydraAdminClientServiceMockRecorder struct {
	mock *MockhydraAdminClientService
}

// NewMockhydraAdminClientService creates a new mock instance.
func NewMockhydraAdminClientService(ctrl *gomock.Controller) *MockhydraAdminClientService {
	mock := &MockhydraAdminClientService{ctrl: ctrl}
	mock.recorder = &MockhydraAdminClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhydraAdminClientService) EXPECT() *MockhydraAdminClientServiceMockRecorder {
	return m.recorder
}

// AcceptConsentRequest mocks base method.
func (m *MockhydraAdminClientService) AcceptConsentRequest(params *admin.AcceptConsentRequestParams) (*admin.AcceptConsentRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsentRequest", params)
	ret0, _ := ret[0].(*admin.AcceptConsentRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptConsentRequest indicates an expected call of AcceptConsentRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) AcceptConsentRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsentRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).AcceptConsentRequest), params)
}

// AcceptLoginRequest mocks base method.
func (m *MockhydraAdminClientService) AcceptLoginRequest(params *admin.AcceptLoginRequestParams) (*admin.AcceptLoginRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLoginRequest", params)
	ret0, _ := ret[0].(*admin.AcceptLoginRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptLoginRequest indicates an expected call of AcceptLoginRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) AcceptLoginRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLoginRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).AcceptLoginRequest), params)
}

// AcceptLogoutRequest mocks base method.
func (m *MockhydraAdminClientService) AcceptLogoutRequest(params *admin.AcceptLogoutRequestParams) (*admin.AcceptLogoutRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLogoutRequest", params)
	ret0, _ := ret[0].(*admin.AcceptLogoutRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptLogoutRequest indicates an expected call of AcceptLogoutRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) AcceptLogoutRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLogoutRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).AcceptLogoutRequest), params)
}

// GetConsentRequest mocks base method.
func (m *MockhydraAdminClientService) GetConsentRequest(params *admin.GetConsentRequestParams) (*admin.GetConsentRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsentRequest", params)
	ret0, _ := ret[0].(*admin.GetConsentRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsentRequest indicates an expected call of GetConsentRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) GetConsentRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsentRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).GetConsentRequest), params)
}

// GetLoginRequest mocks base method.
func (m *MockhydraAdminClientService) GetLoginRequest(params *admin.GetLoginRequestParams) (*admin.GetLoginRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginRequest", params)
	ret0, _ := ret[0].(*admin.GetLoginRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginRequest indicates an expected call of GetLoginRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) GetLoginRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).GetLoginRequest), params)
}

// GetLogoutRequest mocks base method.
func (m *MockhydraAdminClientService) GetLogoutRequest(params *admin.GetLogoutRequestParams) (*admin.GetLogoutRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogoutRequest", params)
	ret0, _ := ret[0].(*admin.GetLogoutRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogoutRequest indicates an expected call of GetLogoutRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) GetLogoutRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogoutRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).GetLogoutRequest), params)
}

// IntrospectOAuth2Token mocks base method.
func (m *MockhydraAdminClientService) IntrospectOAuth2Token(params *admin.IntrospectOAuth2TokenParams) (*admin.IntrospectOAuth2TokenOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectOAuth2Token", params)
	ret0, _ := ret[0].(*admin.IntrospectOAuth2TokenOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectOAuth2Token indicates an expected call of IntrospectOAuth2Token.
func (mr *MockhydraAdminClientServiceMockRecorder) IntrospectOAuth2Token(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectOAuth2Token", reflect.TypeOf((*MockhydraAdminClientService)(nil).IntrospectOAuth2Token), params)
}

// MockkratosPublicClientService is a mock of kratosPublicClientService interface.
type MockkratosPublicClientService struct {
	ctrl     *gomock.Controller
	recorder *MockkratosPublicClientServiceMockRecorder
}

// MockkratosPublicClientServiceMockRecorder is the mock recorder for MockkratosPublicClientService.
type MockkratosPublicClientServiceMockRecorder struct {
	mock *MockkratosPublicClientService
}

// NewMockkratosPublicClientService creates a new mock instance.
func NewMockkratosPublicClientService(ctrl *gomock.Controller) *MockkratosPublicClientService {
	mock := &MockkratosPublicClientService{ctrl: ctrl}
	mock.recorder = &MockkratosPublicClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkratosPublicClientService) EXPECT() *MockkratosPublicClientServiceMockRecorder {
	return m.recorder
}

// CompleteSelfServiceBrowserSettingsOIDCSettingsFlow mocks base method.
func (m *MockkratosPublicClientService) CompleteSelfServiceBrowserSettingsOIDCSettingsFlow(params *public.CompleteSelfServiceBrowserSettingsOIDCSettingsFlowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSelfServiceBrowserSettingsOIDCSettingsFlow", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteSelfServiceBrowserSettingsOIDCSettingsFlow indicates an expected call of CompleteSelfServiceBrowserSettingsOIDCSettingsFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) CompleteSelfServiceBrowserSettingsOIDCSettingsFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSelfServiceBrowserSettingsOIDCSettingsFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).CompleteSelfServiceBrowserSettingsOIDCSettingsFlow), params)
}

// CompleteSelfServiceLoginFlowWithPasswordMethod mocks base method.
func (m *MockkratosPublicClientService) CompleteSelfServiceLoginFlowWithPasswordMethod(params *public.CompleteSelfServiceLoginFlowWithPasswordMethodParams) (*public.CompleteSelfServiceLoginFlowWithPasswordMethodOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSelfServiceLoginFlowWithPasswordMethod", params)
	ret0, _ := ret[0].(*public.CompleteSelfServiceLoginFlowWithPasswordMethodOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteSelfServiceLoginFlowWithPasswordMethod indicates an expected call of CompleteSelfServiceLoginFlowWithPasswordMethod.
func (mr *MockkratosPublicClientServiceMockRecorder) CompleteSelfServiceLoginFlowWithPasswordMethod(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSelfServiceLoginFlowWithPasswordMethod", reflect.TypeOf((*MockkratosPublicClientService)(nil).CompleteSelfServiceLoginFlowWithPasswordMethod), params)
}

// CompleteSelfServiceRegistrationFlowWithPasswordMethod mocks base method.
func (m *MockkratosPublicClientService) CompleteSelfServiceRegistrationFlowWithPasswordMethod(params *public.CompleteSelfServiceRegistrationFlowWithPasswordMethodParams) (*public.CompleteSelfServiceRegistrationFlowWithPasswordMethodOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSelfServiceRegistrationFlowWithPasswordMethod", params)
	ret0, _ := ret[0].(*public.CompleteSelfServiceRegistrationFlowWithPasswordMethodOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteSelfServiceRegistrationFlowWithPasswordMethod indicates an expected call of CompleteSelfServiceRegistrationFlowWithPasswordMethod.
func (mr *MockkratosPublicClientServiceMockRecorder) CompleteSelfServiceRegistrationFlowWithPasswordMethod(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSelfServiceRegistrationFlowWithPasswordMethod", reflect.TypeOf((*MockkratosPublicClientService)(nil).CompleteSelfServiceRegistrationFlowWithPasswordMethod), params)
}

// GetSelfServiceLoginFlow mocks base method.
func (m *MockkratosPublicClientService) GetSelfServiceLoginFlow(params *public.GetSelfServiceLoginFlowParams) (*public.GetSelfServiceLoginFlowOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfServiceLoginFlow", params)
	ret0, _ := ret[0].(*public.GetSelfServiceLoginFlowOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfServiceLoginFlow indicates an expected call of GetSelfServiceLoginFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) GetSelfServiceLoginFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfServiceLoginFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).GetSelfServiceLoginFlow), params)
}

// GetSelfServiceRecoveryFlow mocks base method.
func (m *MockkratosPublicClientService) GetSelfServiceRecoveryFlow(params *public.GetSelfServiceRecoveryFlowParams) (*public.GetSelfServiceRecoveryFlowOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfServiceRecoveryFlow", params)
	ret0, _ := ret[0].(*public.GetSelfServiceRecoveryFlowOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfServiceRecoveryFlow indicates an expected call of GetSelfServiceRecoveryFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) GetSelfServiceRecoveryFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfServiceRecoveryFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).GetSelfServiceRecoveryFlow), params)
}

// GetSelfServiceRegistrationFlow mocks base method.
func (m *MockkratosPublicClientService) GetSelfServiceRegistrationFlow(params *public.GetSelfServiceRegistrationFlowParams) (*public.GetSelfServiceRegistrationFlowOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfServiceRegistrationFlow", params)
	ret0, _ := ret[0].(*public.GetSelfServiceRegistrationFlowOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfServiceRegistrationFlow indicates an expected call of GetSelfServiceRegistrationFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) GetSelfServiceRegistrationFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfServiceRegistrationFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).GetSelfServiceRegistrationFlow), params)
}

// GetSelfServiceSettingsFlow mocks base method.
func (m *MockkratosPublicClientService) GetSelfServiceSettingsFlow(params *public.GetSelfServiceSettingsFlowParams, authInfo runtime.ClientAuthInfoWriter) (*public.GetSelfServiceSettingsFlowOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfServiceSettingsFlow", params, authInfo)
	ret0, _ := ret[0].(*public.GetSelfServiceSettingsFlowOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfServiceSettingsFlow indicates an expected call of GetSelfServiceSettingsFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) GetSelfServiceSettingsFlow(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfServiceSettingsFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).GetSelfServiceSettingsFlow), params, authInfo)
}

// InitializeSelfServiceBrowserLogoutFlow mocks base method.
func (m *MockkratosPublicClientService) InitializeSelfServiceBrowserLogoutFlow(params *public.InitializeSelfServiceBrowserLogoutFlowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSelfServiceBrowserLogoutFlow", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeSelfServiceBrowserLogoutFlow indicates an expected call of InitializeSelfServiceBrowserLogoutFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) InitializeSelfServiceBrowserLogoutFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSelfServiceBrowserLogoutFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).InitializeSelfServiceBrowserLogoutFlow), params)
}

// InitializeSelfServiceLoginViaBrowserFlow mocks base method.
func (m *MockkratosPublicClientService) InitializeSelfServiceLoginViaBrowserFlow(params *public.InitializeSelfServiceLoginViaBrowserFlowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSelfServiceLoginViaBrowserFlow", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeSelfServiceLoginViaBrowserFlow indicates an expected call of InitializeSelfServiceLoginViaBrowserFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) InitializeSelfServiceLoginViaBrowserFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSelfServiceLoginViaBrowserFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).InitializeSelfServiceLoginViaBrowserFlow), params)
}

// InitializeSelfServiceRecoveryViaBrowserFlow mocks base method.
func (m *MockkratosPublicClientService) InitializeSelfServiceRecoveryViaBrowserFlow(params *public.InitializeSelfServiceRecoveryViaBrowserFlowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSelfServiceRecoveryViaBrowserFlow", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeSelfServiceRecoveryViaBrowserFlow indicates an expected call of InitializeSelfServiceRecoveryViaBrowserFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) InitializeSelfServiceRecoveryViaBrowserFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSelfServiceRecoveryViaBrowserFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).InitializeSelfServiceRecoveryViaBrowserFlow), params)
}

// InitializeSelfServiceRegistrationViaBrowserFlow mocks base method.
func (m *MockkratosPublicClientService) InitializeSelfServiceRegistrationViaBrowserFlow(params *public.InitializeSelfServiceRegistrationViaBrowserFlowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSelfServiceRegistrationViaBrowserFlow", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeSelfServiceRegistrationViaBrowserFlow indicates an expected call of InitializeSelfServiceRegistrationViaBrowserFlow.
func (mr *MockkratosPublicClientServiceMockRecorder) InitializeSelfServiceRegistrationViaBrowserFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSelfServiceRegistrationViaBrowserFlow", reflect.TypeOf((*MockkratosPublicClientService)(nil).InitializeSelfServiceRegistrationViaBrowserFlow), params)
}

// Whoami mocks base method.
func (m *MockkratosPublicClientService) Whoami(params *public.WhoamiParams, authInfo runtime.ClientAuthInfoWriter) (*public.WhoamiOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Whoami", params, authInfo)
	ret0, _ := ret[0].(*public.WhoamiOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whoami indicates an expected call of Whoami.
func (mr *MockkratosPublicClientServiceMockRecorder) Whoami(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whoami", reflect.TypeOf((*MockkratosPublicClientService)(nil).Whoami), params, authInfo)
}

// MockkratosAdminClientService is a mock of kratosAdminClientService interface.
type MockkratosAdminClientService struct {
	ctrl     *gomock.Controller
	recorder *MockkratosAdminClientServiceMockRecorder
}

// MockkratosAdminClientServiceMockRecorder is the mock recorder for MockkratosAdminClientService.
type MockkratosAdminClientServiceMockRecorder struct {
	mock *MockkratosAdminClientService
}

// NewMockkratosAdminClientService creates a new mock instance.
func NewMockkratosAdminClientService(ctrl *gomock.Controller) *MockkratosAdminClientService {
	mock := &MockkratosAdminClientService{ctrl: ctrl}
	mock.recorder = &MockkratosAdminClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkratosAdminClientService) EXPECT() *MockkratosAdminClientServiceMockRecorder {
	return m.recorder
}

// CreateIdentity mocks base method.
func (m *MockkratosAdminClientService) CreateIdentity(params *admin0.CreateIdentityParams) (*admin0.CreateIdentityCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", params)
	ret0, _ := ret[0].(*admin0.CreateIdentityCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockkratosAdminClientServiceMockRecorder) CreateIdentity(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockkratosAdminClientService)(nil).CreateIdentity), params)
}

// CreateRecoveryLink mocks base method.
func (m *MockkratosAdminClientService) CreateRecoveryLink(params *admin0.CreateRecoveryLinkParams) (*admin0.CreateRecoveryLinkOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryLink", params)
	ret0, _ := ret[0].(*admin0.CreateRecoveryLinkOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryLink indicates an expected call of CreateRecoveryLink.
func (mr *MockkratosAdminClientServiceMockRecorder) CreateRecoveryLink(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryLink", reflect.TypeOf((*MockkratosAdminClientService)(nil).CreateRecoveryLink), params)
}

// GetIdentity mocks base method.
func (m *MockkratosAdminClientService) GetIdentity(params *admin0.GetIdentityParams) (*admin0.GetIdentityOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", params)
	ret0, _ := ret[0].(*admin0.GetIdentityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockkratosAdminClientServiceMockRecorder) GetIdentity(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockkratosAdminClientService)(nil).GetIdentity), params)
}

// UpdateIdentity mocks base method.
func (m *MockkratosAdminClientService) UpdateIdentity(params *admin0.UpdateIdentityParams) (*admin0.UpdateIdentityOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", params)
	ret0, _ := ret[0].(*admin0.UpdateIdentityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockkratosAdminClientServiceMockRecorder) UpdateIdentity(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockkratosAdminClientService)(nil).UpdateIdentity), params)
}
