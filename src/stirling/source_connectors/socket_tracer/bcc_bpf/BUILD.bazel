# Copyright 2018- The Pixie Authors.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

load("//bazel:cc_resource.bzl", "pl_bpf_cc_resource")
load("//bazel:pl_bpf_preprocess.bzl", "pl_bpf_preprocess")
load("//bazel:pl_build_system.bzl", "pl_cc_test")

package(default_visibility = ["//src/stirling:__subpackages__"])

# TODO(oazizi): Ideally, we would use pl_bpf_preprocess and feed it to pl_cc_resource
# as an input, but that turns out to be a bit more tricky, since bl_cc_resource would
# then have to understand both labels and sources as inputs. So for now, use bl_bpf_cc_resource
# which automatically calls pl_bpf_preprocess under the hood.

# Leaving the bl_bpf_preprocess targets in here only for debug/observability, but keep
# in mind that they are not actively used targets.

socket_trace_hdrs = [
    "go_http2_trace.c",
    "go_tls_trace.c",
    "go_trace_common.h",
    "openssl_trace.c",
    "macros.h",
    "protocol_inference.h",
    "//src/stirling/bpf_tools/bcc_bpf:headers",
    "//src/stirling/bpf_tools/bcc_bpf_intf:headers",
    "//src/stirling/source_connectors/socket_tracer/bcc_bpf_intf:headers",
]

pl_bpf_cc_resource(
    name = "socket_trace",
    src = "socket_trace.c",
    hdrs = socket_trace_hdrs,
    syshdrs = "//src/stirling/bpf_tools/bcc_bpf/system-headers",
)

# Debug target, so output of preprocessing can be viewed.
# Must keep in sync with :socket_trace.
# Do not use as a dependency.
pl_bpf_preprocess(
    name = "socket_trace_preprocess_debug",
    src = "socket_trace.c",
    hdrs = socket_trace_hdrs,
    syshdrs = "//src/stirling/bpf_tools/bcc_bpf/system-headers",
)

pl_cc_test(
    name = "protocol_inference_test",
    srcs = [
        "protocol_inference.h",
        "protocol_inference_test.cc",
        "//src/stirling/bpf_tools/bcc_bpf:headers",
        "//src/stirling/bpf_tools/bcc_bpf_intf:headers",
        "//src/stirling/source_connectors/socket_tracer/bcc_bpf_intf:headers",
    ],
    deps = [
        "//src/stirling/utils:cc_library",
    ],
)
